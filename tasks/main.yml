---
- include_role:
    name: andrewrothstein.unarchive-deps
- name: check for spark installation
  become: true
  become_user: '{{spark_user}}'
  stat:
    path: '{{ spark_target_dir }}'
  changed_when: false
  register: spark_binary
- when: not spark_binary.stat.exists
  block:
    - name: downloading spark from {{ spark_url }}
      become: true
      become_user: '{{spark_user}}'
      get_url:
        url: '{{ spark_url }}'
        dest: '{{ spark_tmp_tgz }}'
        mode: 0644
        checksum: '{{ spark_checksum }}'
        timeout: '{{ spark_timeout }}'
    - name: unarchive {{ spark_tmp_tgz }}
      become: true
      become_user: '{{spark_user}}'
      unarchive:
        remote_src: true
        dest: '{{ spark_parent_dir }}'
        src: '{{ spark_tmp_tgz }}'
        creates: '{{ spark_target_dir }}'
  always:
    - name: rm {{ spark_tmp_tgz }}
      become: true
      become_user: '{{spark_user}}'
      file:
        path: '{{ spark_tmp_tgz }}'
        state: absent
- name: linking {{ spark_link_dir }} to {{ spark_target_dir }}
  become: true
  become_user: '{{spark_user}}'
  file:
    src: '{{ spark_target_dir }}'
    dest: '{{ spark_link_dir }}'
    state: link

- set_fact:
  spark_profile: "{{ lookup('tempalte', tempaltes/spark.env.j2)}}"

- blockinfile:
    dest: '~/.profile'
    content: '{{ spark_profile }}'
    state: present

- when: spark_is_master
  block:
  - name: env/spark-env.sh
    become: true
    become_user: '{{spark_user}}'
    ansible.builtin.copy:
      src: '{{ spark_target_dir }}/conf/spark-env.sh.template'
      dest: '{{ spark_target_dir }}/conf/spark-env.sh'
      force: yes
      remote_src: true
  - name: env/workers
    become: true
    become_user: '{{spark_user}}'
    ansible.builtin.copy:
      src: '{{ spark_target_dir }}/conf/workers.template'
      dest: '{{ spark_target_dir }}/conf/workers'
      force: yes
      remote_src: true
